{% language java %}{% copyright_block %}
{% filter noblanklines %}
/*
 * This file was generated.
 *  with {{ tool.name }} {{ tool.version }}{% if tool.buildDate %} (build: {{ tool.buildDate }}){% endif %}
{% if options.include_timestamp %}
 *  on {{ tool.runDate }} at {{ tool.runTime }} {% endif %}
 */
{% endfilter %}

package {{ api.package.name }};


{% imports api %}
{% if api.dataWrapper %}
import com.google.api.client.googleapis.json.JsonCContent;
import com.google.api.client.googleapis.json.JsonCParser;
{% endif %}
import com.google.api.client.googleapis.services.GoogleClient;
import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpMethod;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.HttpResponse;
import com.google.api.client.http.HttpTransport;
{% if api.dataWrapper %}
import com.google.api.client.http.json.JsonHttpContent;
import com.google.api.client.http.json.JsonHttpParser;
{% endif %}
import com.google.api.client.http.json.JsonHttpRequest;
import com.google.api.client.http.json.JsonHttpRequestInitializer;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.util.Key;
import java.io.IOException;
{% endimports %}


/**
 * Service definition for {{ api.className }} ({{ api.version }}).
 *
 * <p>
 * {{ api.description }}
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="{{ api.documentationLink }}" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link JsonHttpRequestInitializer} to initialize global parameters via its
 * {@link Builder}. Sample usage:
 * </p>
 *
 * <pre>
  public class {{ api.className }}RequestInitializer implements JsonHttpRequestInitializer {
      public void initialize(JsonHttpRequest request) {
        {{ api.className }}Request {{ api.className|lower }}Request = ({{ api.className }}Request)request;
        {{ api.className|lower }}Request.setPrettyPrint(true);
        {{ api.className|lower }}Request.setKey(ClientCredentials.KEY);
    }
  }
 * </pre>
 *
 * @since 1.3.0
 * @author Google, Inc.
 */
public class {{ api.className }} extends GoogleClient {

  /**
   * The default base URL of the service. This is determined when the library is generated and
   * normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = "{{ api.serviceHost }}{{ api.basePath }}";

  /**
   * The application name to be sent in the User-Agent header of each request.
   */
  @Deprecated
  private String applicationName;

  /**
   * The URL of the server hosting the API.
   */
  @Deprecated
  private String baseServer = "{{ api.serviceHost }}";

  /**
   * The base path of the service.
   */
  @Deprecated
  private String basePath = "{{ api.basePath }}";

  /**{% filter block_comment %}
   * Construct a {{ api.className }} instance to connect to the
   * {{ api.className }} service.
   * {% endfilter %}
   *
   * @param transport The transport to use for requests
   * @param requestInitializer A initializer to use to build requests for subsequent API calls. May
   *        be null if no initializer is required.
   * @param jsonFactory A factory for creating JSON parsers and serializers
   *
   * @deprecated (scheduled to be removed in 1.4) Use
   *             {@link #{{ api.className }}(HttpTransport, JsonFactory)} for only required
   *             params or {@link Builder} if you need to specify any of the optional params.
   */
  @Deprecated
  public {{ api.className }}(
      HttpTransport transport,
      HttpRequestInitializer requestInitializer,
      JsonFactory jsonFactory) {
    super(transport, new {{ api.className }}RequestInitializer(), requestInitializer, jsonFactory,
        DEFAULT_BASE_URL, null);
    (({{ api.className }}RequestInitializer)getJsonHttpRequestInitializer()).set{{ api.className }}(this);
  }

  /**{% filter block_comment %}
   * Construct a {{ api.className }} instance to connect to the
   * {{ api.className }} service.
   * {% endfilter %}
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport The transport to use for requests
   * @param jsonFactory A factory for creating JSON parsers and serializers
   */
  public {{ api.className }}(HttpTransport transport, JsonFactory jsonFactory) {
    this(transport, null, jsonFactory);
  }

  /**{% filter block_comment %}
   * Construct a {{ api.className }} instance to connect to the
   * {{ api.className }} service.
   * {% endfilter %}
   *
   * @param appName The application name. This is embedded into the User-Agent string
   * @param transport The transport to use for requests
   * @param jsonFactory A factory for creating JSON parsers and serializers
   *
   * @deprecated (scheduled to be removed in 1.4) Use
   *             {@link #{{ api.className }}(HttpTransport, JsonFactory)} for only required
   *             params or {@link Builder} if you need to specify any of the optional params.
   */
  @Deprecated
  public {{ api.className }}(String appName, HttpTransport transport, JsonFactory jsonFactory) {
    this(transport, null, jsonFactory);
    setApplicationName(appName);
  }
{% for param in api.parameters %}

  {% doc_comment_if param.description %}
  @Key
  private {{ param.codeType }} {{ param.codeName }};

  /**{% filter block_comment %}
   * {% filter noblanklines %}{{ param.description }}
  {% if param.default %} [default: {{ param.default }}]{% endif %}
  {% if param.minimum %} [minimum: {{ param.minimum }}]{% endif %}
  {% if param.maximum %} [maximum: {{ param.maximum }}]{% endif %} {% endfilter %} {% endfilter %}
   *
   * @deprecated (scheduled to be removed in 1.4) Use {@link JsonHttpRequestInitializer}.
   */
  @Deprecated
  public {{ param.codeType }} get{{ param.codeName|capfirst }}() {
    return {{ param.codeName }};
  }

  /**{% filter block_comment %}
   * {% filter noblanklines %}{{ param.description }}{% endfilter %} {% endfilter %}
   *
   * @deprecated (scheduled to be removed in 1.4) Use {@link JsonHttpRequestInitializer}.
   */
  @Deprecated
  public {{ api.className }} set{{ param.codeName|capfirst }}({{ param.codeType }} {{ param.codeName }}) {
    this.{{ param.codeName }} = {{ param.codeName }};
    return this;
  }{% endfor %}

{% filter noblanklines %}
  /**
   * Created to maintain backwards compatibility (scheduled to be removed in 1.4).
   */
  private static class {{ api.className }}RequestInitializer implements JsonHttpRequestInitializer {
    private {{ api.className }} {{ api.className|lower }};
    void set{{ api.className }}({{ api.className }} {{ api.className|lower }}) {
      this.{{ api.className|lower }} = {{ api.className|lower }};
    }

    public void initialize(JsonHttpRequest jsonHttpRequest) {
      {{ api.className }}Request request = ({{ api.className }}Request)jsonHttpRequest;
{% for param in api.parameters %}
      request.set{{ param.codeName|capfirst }}({{ api.className|lower }}.get{{ param.codeName|capfirst }}());
{% endfor %}
    }
  }
{% endfilter %}

  /**{% filter block_comment %}
   * Construct a {{ api.className }} instance to connect to the
   * {{ api.className }} service.
   * {% endfilter %}
   *
   * @param transport The transport to use for requests
   * @param jsonHttpRequestInitializer The initializer to use when creating an JSON HTTP request
   * @param httpRequestInitializer The initializer to use when creating an {@link HttpRequest}
   * @param jsonFactory A factory for creating JSON parsers and serializers
   * @param baseUrl The base url of the service on the server
   * @param applicationName The application name to be sent in the User-Agent header of requests
   */
  {{ api.className }}(
      HttpTransport transport,
      JsonHttpRequestInitializer jsonHttpRequestInitializer,
      HttpRequestInitializer httpRequestInitializer,
      JsonFactory jsonFactory,
      String baseUrl,
      String applicationName) {
      super(transport,
          jsonHttpRequestInitializer,
          httpRequestInitializer,
          jsonFactory,
          baseUrl,
          applicationName);
  }
{% if api.dataWrapper %}
  @Override
  public JsonHttpParser createParser() {
    return new JsonCParser(getJsonFactory());
  }

  @Override
  protected JsonHttpContent createSerializer(Object body) {
    return new JsonCContent(getJsonFactory(), body);
  }
{% endif %}
  /**
   * Sets the application name to be sent in the User-Agent header of requests
   *
   * @param applicationName The application name
   *
   * @deprecated (scheduled to be removed in 1.4) Use {@link Builder}.
   */
  @Deprecated
  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }

  /**
   * Returns the application name to be sent in the User-Agent header of requests or {@code null}
   * for none.
   *
   * <p>
   * This override will be removed in 1.4
   * </p>
   */
  @Override
  public String getApplicationName() {
    if (applicationName == null) {
      return super.getApplicationName();
    }
    return applicationName;
  }

  /**
   * Returns the base URL of the service, for example {@code "{{ api.serviceHost }}{{ api.basePath }}"}.
   *
   * <p>
   * This override will be removed in 1.4
   * </p>
   */
  @Override
  public String getBaseUrl() {
    String baseUrl = getBaseServer() + getBasePath();
    if (DEFAULT_BASE_URL.equals(baseUrl)) {
      return super.getBaseUrl();
    }
    return baseUrl;
  }

  /**
   * Sets the URL of the server hosting the API.
   *
   * @param baseServer The URL of the server hosting the API
   *
   * @deprecated (scheduled to be removed in 1.4) Use {@link Builder}.
   */
  @Deprecated
  public void setBaseServer(String baseServer) {
    this.baseServer = baseServer;
  }

  /**
   * Returns the URL of the server hosting the API, for example {@code "{{ api.serviceHost }}"}.
   *
   * @deprecated (scheduled to be removed in 1.4) Use {@link #getBaseUrl}.
   */
  @Deprecated
  public String getBaseServer() {
    return baseServer;
  }

  /**
   * Sets the base path of the service.
   *
   * @param basePath The base path of the service
   *
   * @deprecated (scheduled to be removed in 1.4) Use {@link Builder}.
   */
  @Deprecated
  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  /**
   * Returns the base path of the service, for example {@code "{{ api.basePath }}"}.
   *
   * @deprecated (scheduled to be removed in 1.4) Use {@link #getBaseUrl}.
   */
  @Deprecated
  public String getBasePath() {
    return basePath;
  }

  /**
   * Returns an instance of a new builder.
   *
   * @param transport The transport to use for requests
   * @param jsonFactory A factory for creating JSON parsers and serializers
   */
   public static Builder builder(HttpTransport transport, JsonFactory jsonFactory) {
     return new Builder(transport, jsonFactory);
   }
{% for resource in api.resources %}
{% indent %}{% emit_resource_def resource %}{% endindent %}
{% endfor %}
{% for method in api.methods %}
{% indent %}{% emit_method_def method %}{% endindent %}
{% endfor %}

  /**
   * Builder for {@link {{ api.className }}}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends GoogleClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport The transport to use for requests
     * @param jsonFactory A factory for creating JSON parsers and serializers
     */
    Builder(HttpTransport transport, JsonFactory jsonFactory) {
      super(transport, jsonFactory, new GenericUrl(DEFAULT_BASE_URL));
    }

    /** Builds a new instance of {@link {{ api.className }}}. */
    @Override
    public {{ api.className }} build() {
      return new {{ api.className }}(
          getTransport(),
          getJsonHttpRequestInitializer(),
          getHttpRequestInitializer(),
          getJsonFactory(),
          getBaseUrl().build(),
          getApplicationName());
    }

    @Override
    public Builder setJsonHttpRequestInitializer(
        JsonHttpRequestInitializer jsonHttpRequestInitializer) {
      super.setJsonHttpRequestInitializer(jsonHttpRequestInitializer);
      return this;
    }

    @Override
    public Builder setHttpRequestInitializer(HttpRequestInitializer httpRequestInitializer) {
      super.setHttpRequestInitializer(httpRequestInitializer);
      return this;
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      super.setApplicationName(applicationName);
      return this;
    }
  }
}
