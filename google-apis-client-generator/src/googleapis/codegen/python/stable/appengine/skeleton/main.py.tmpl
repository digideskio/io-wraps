#!/usr/bin/env python
#
# Copyright 2007 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""Starting template for Google App Engine applications.

Use this project as a starting point if you are just beginning to build a Google
App Engine project. Remember to download the OAuth 2.0 client secrets which can
be obtained from the Developer Console <https://code.google.com/apis/console/>
and save them as 'client_secrets.json' in the project directory.
"""

__author__ = 'jcgregorio@google.com (Joe Gregorio)'


import httplib2
import logging
import os
import pickle

from apiclient.discovery import build
from oauth2client.appengine import oauth2decorator_from_clientsecrets
from oauth2client.client import AccessTokenRefreshError
from google.appengine.api import memcache
from google.appengine.ext import webapp
from google.appengine.ext.webapp import template
from google.appengine.ext.webapp.util import run_wsgi_app


# CLIENT_SECRETS, name of a file containing the OAuth 2.0 information for this
# application, including client_id and client_secret, which can be downloaded
# from:
#
#   {{ dev_console.client_secret_url }}
#
# And also on the API Access tab on the Google APIs Console
# <https://code.google.com/apis/console>
CLIENT_SECRETS = os.path.join(os.path.dirname(__file__), 'client_secrets.json')

# Helpful message to display in the browser if the CLIENT_SECRETS file
# is missing.
MISSING_CLIENT_SECRETS_MESSAGE = """
<h1>Warning: Please configure OAuth 2.0</h1>
<p>
To make this sample run you will need to populate the client_secrets.json file
found at:
</p>
<p>
<codel><a href="%s">%s</a></code>.
</p>
<p>
  and save it at:
</p>
<code>%s</code>
</p>
<p>You can also copy the information found on the <a
href="https://code.google.com/apis/console">APIs Console</a>.
</p>

""" % ('{{ dev_console.client_secret_url }}', '{{ dev_console.client_secret_url }}', CLIENT_SECRETS)


http = httplib2.Http(memcache)
service = build("{{ api.name }}", "{{ api.version }}", http=http)


# Set up an OAuth2Decorator object to be used if we need to authenticate.
# Add one or more of the following scopes separated by spaces in the scopes
# parameter below. PLEASE ONLY ADD THE SCOPES YOU NEED. For more information on
# using scopes please see <https://developers.google.com/+/best-practices>.
# {% for scope in api.auth.oauth2.scopes %}
#   {{ scope }}
# {% endfor %}
decorator = oauth2decorator_from_clientsecrets(
    CLIENT_SECRETS,
    '',
    MISSING_CLIENT_SECRETS_MESSAGE)

class MainHandler(webapp.RequestHandler):

  @decorator.oauth_aware
  def get(self):
    self.response.out.write("""<html><body>
<h1>Congrats!</h1>
<p>It worked, now add code here.</p>

<p>For more information on the {% if api.title %}{{ api.title }}{% else %}{{
                            api.name }}{% endif %} API you can visit:</p>

<p style="margin:1em">
  <a href="{{ api.documentationLink }}">{{ api.documentationLink }}</a>
</p>

<p>
For more information on the {{ api.title }} API python library surface you can visit:
</p>

<p style="margin:1em">
   <a href="http://api-python-client-doc.appspot.com/{{ api.name }}/{{ api.version }}">
     http://api-python-client-doc.appspot.com/{{ api.name }}/{{ api.version }}
   </a>
</p>

<p>
 For information on the Python Client Library visit:
</p>

<p style="margin:1em">
   <a href="http://code.google.com/p/google-api-python-client/wiki/GettingStarted">
     http://code.google.com/p/google-api-python-client/wiki/GettingStarted
   </a>
</p>
</body></html>
""")

def main():
  application = webapp.WSGIApplication(
      [
       ('/', MainHandler),
      ],
      debug=True)
  run_wsgi_app(application)


if __name__ == '__main__':
  main()
